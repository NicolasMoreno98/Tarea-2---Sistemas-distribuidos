version: '3.8'

services:
  # ==================== INFRAESTRUCTURA BASE (Tarea 1) ====================
  
  # Base de datos PostgreSQL
  postgres:
    image: postgres:13-alpine
    container_name: postgres_db
    environment:
      POSTGRES_DB: yahoo_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/schema_tarea2.sql:/docker-entrypoint-initdb.d/schema.sql
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d yahoo_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - yahoo_network

  # Cache Redis con política LRU
  redis:
    image: redis:7-alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
      - redis_data:/data
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - yahoo_network

  # ==================== KAFKA ECOSYSTEM (Tarea 2) ====================
  
  # Zookeeper - Coordinación para Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - yahoo_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka Broker - Sistema de mensajería
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka_broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - yahoo_network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka Init - Creación de tópicos
  kafka-init:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka_init
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      # Esperar a que Kafka esté completamente listo
      echo 'Esperando a Kafka...'
      cub kafka-ready -b kafka:9092 1 60
      
      echo 'Creando tópicos...'
      
      # Tópico: Preguntas pendientes de procesamiento
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists \
        --topic questions-pending \
        --partitions 3 \
        --replication-factor 1 \
        --config retention.ms=604800000
      
      # Tópico: Respuestas exitosas del LLM
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists \
        --topic llm-responses-success \
        --partitions 3 \
        --replication-factor 1 \
        --config retention.ms=604800000
      
      # Tópico: Errores por sobrecarga del LLM
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists \
        --topic llm-responses-error-overload \
        --partitions 2 \
        --replication-factor 1 \
        --config retention.ms=604800000
      
      # Tópico: Errores por cuota excedida
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists \
        --topic llm-responses-error-quota \
        --partitions 2 \
        --replication-factor 1 \
        --config retention.ms=604800000
      
      # Tópico: Respuestas validadas listas para persistir
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists \
        --topic validated-responses \
        --partitions 3 \
        --replication-factor 1 \
        --config retention.ms=2592000000
      
      # Tópico: Respuestas de baja calidad (métricas)
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists \
        --topic low-quality-responses \
        --partitions 1 \
        --replication-factor 1 \
        --config retention.ms=2592000000
      
      # Tópico: Errores permanentes (max reintentos alcanzado)
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists \
        --topic llm-responses-error-permanent \
        --partitions 1 \
        --replication-factor 1 \
        --config retention.ms=2592000000
      
      echo 'Tópicos creados exitosamente'
      kafka-topics --bootstrap-server kafka:9092 --list
      "
    networks:
      - yahoo_network

  # ==================== SERVICIOS DE APLICACIÓN (Tarea 2) ====================
  # NOTA: Apache Flink fue reemplazado por score-validator (Python) para simplificar
  # la implementación. score-validator cumple exactamente la misma funcionalidad:
  # - Lee desde el tópico de respuestas exitosas
  # - Calcula BERTScore
  # - Decide regeneración o persistencia según umbral de calidad (0.75)
  # - Previene ciclos infinitos limitando reintentos
  
  # Servicio de Almacenamiento (adaptado para Kafka)
  storage-service:
    build: ./storage_service
    container_name: storage_service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/yahoo_db
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    ports:
      - "5001:5001"
    networks:
      - yahoo_network
    restart: unless-stopped

  # Consumidor LLM Asíncrono (nuevo para Tarea 2)
  llm-consumer:
    build:
      context: ./llm_consumer
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
      - OLLAMA_URL=http://host.docker.internal:11434
      - MODEL_NAME=tinyllama
      - CONSUMER_GROUP=llm-consumer-group
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - yahoo_network
    restart: unless-stopped
    deploy:
      replicas: 2

  # Consumidor de Reintentos - Overload (nuevo para Tarea 2)
  retry-overload-consumer:
    build:
      context: ./retry_consumers
      dockerfile: Dockerfile.overload
    container_name: retry_overload_consumer
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
    networks:
      - yahoo_network
    restart: unless-stopped

  # Consumidor de Reintentos - Quota (nuevo para Tarea 2)
  retry-quota-consumer:
    build:
      context: ./retry_consumers
      dockerfile: Dockerfile.quota
    container_name: retry_quota_consumer
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
    networks:
      - yahoo_network
    restart: unless-stopped

  # Score Validator - Validacion de calidad (nuevo para Tarea 2)
  # NOTA: Servicio Python para validación de calidad de respuestas
  # Trabaja en conjunto con Flink para el procesamiento de flujos
  # Expone HTTP API en puerto 8000 para consultas de Flink
  score-validator:
    build:
      context: ./score_validator
      dockerfile: Dockerfile
    container_name: score_validator
    ports:
      - "8000:8000"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
    networks:
      - yahoo_network
    restart: unless-stopped

  # ==================== APACHE FLINK (Tarea 2) ====================
  
  # Flink Job Manager - Coordinador del cluster Flink
  flink-jobmanager:
    image: flink:1.18-scala_2.12
    container_name: flink_jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
      - KAFKA_BROKER=kafka:9092
    volumes:
      - ./flink-job:/opt/flink-job
      - flink_jobmanager_data:/opt/flink/data
    networks:
      - yahoo_network
    depends_on:
      kafka:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1600m
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flink Task Manager - Ejecutor de trabajos
  flink-taskmanager:
    image: flink:1.18-scala_2.12
    container_name: flink_taskmanager
    command: taskmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
      - KAFKA_BROKER=kafka:9092
    volumes:
      - ./flink-job:/opt/flink-job
      - flink_taskmanager_data:/opt/flink/data
    networks:
      - yahoo_network
    depends_on:
      - flink-jobmanager
    deploy:
      resources:
        limits:
          memory: 1600m
      replicas: 1

  # Generador de Tráfico (adaptado para Tarea 2)
  traffic-generator:
    build: ./traffic_generator
    container_name: traffic_generator
    depends_on:
      - storage-service
    volumes:
      - ./dataset:/data
    environment:
      - STORAGE_SERVICE_URL=http://storage-service:5001
      - NUM_REQUESTS=100
      - REQUEST_INTERVAL_MS=100
      - USE_CACHED_IDS=false  # Cambiar a 'true' para usar preguntas cacheadas
    networks:
      - yahoo_network
    restart: "no"

  # ==================== MONITOREO Y OBSERVABILIDAD ====================
  
  # Kafka UI - Interfaz gráfica para monitorear Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka_ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - yahoo_network
  
  # Servicio de Visualización - Dashboard con gráficos de scores
  viz-service:
    build: ./viz_service
    container_name: viz_service
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5002:5002"
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/yahoo_db
    networks:
      - yahoo_network
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import requests; requests.get('http://localhost:5002/health')\" || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  flink_jobmanager_data:
  flink_taskmanager_data:

networks:
  yahoo_network:
    driver: bridge
    name: yahoo_llm_kafka_network
